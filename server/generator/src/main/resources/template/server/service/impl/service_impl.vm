package ${packageName}.impl;

import ${packageName}.constants.${lowerEntityName}.${entityName}ErrorEnum;
import com.common.response.JSONPageResult;
import com.common.response.JSONResult;
import ${packageName}.dao.mapper.${entityName}Mapper;
import ${packageName}.dto.${lowerEntityName}.${entityName}ListReqDTO;
import ${packageName}.dto.${lowerEntityName}.${entityName}ReqDTO;
import ${packageName}.dto.${lowerEntityName}.${entityName}RespDTO;
import ${packageName}.api.${entityName}Service;
import com.common.response.PageBean;
import com.common.util.IDGenerate;
import com.common.util.PageUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.time.LocalDateTime;
import org.apache.dubbo.config.annotation.Service;

/**
 * @auth guozhenhua
 * @date ${ctime}
 */
@Component
@Service(interfaceClass = ${entityName}Service.class)
public class ${entityName}ServiceImpl implements ${entityName}Service {

    @Autowired
    ${entityName}Mapper ${firstLowerEntityName}Mapper;

    @Override
    public JSONResult create${entityName}(${entityName}ReqDTO ${firstLowerEntityName}ReqDTO) {
        ${firstLowerEntityName}ReqDTO.setId(IDGenerate.generateId());
        ${firstLowerEntityName}ReqDTO.setCreate_time(LocalDateTime.now());
        ${firstLowerEntityName}Mapper.create${entityName}(${firstLowerEntityName}ReqDTO);
        return JSONResult.success();
    }

     @Override
     public JSONResult<${entityName}RespDTO> getById(long id) {
         return JSONResult.success(${firstLowerEntityName}Mapper.getById(id));
     }

    @Override
    public JSONResult update${entityName}(${entityName}ReqDTO ${firstLowerEntityName}ReqDTO) {
        if(${firstLowerEntityName}Mapper.update${entityName}(${firstLowerEntityName}ReqDTO)){
            return JSONResult.success();
        }else{
            return JSONResult.error(${entityName}ErrorEnum.UPDATE_ERROR.getCode(), ${entityName}ErrorEnum.UPDATE_ERROR.getMsg());
        }
    }

    @Override
    public JSONResult del${entityName}(long id) {
        if(${firstLowerEntityName}Mapper.del${entityName}(id)){
            return JSONResult.success();
        }else{
            return JSONResult.error(${entityName}ErrorEnum.UPDATE_ERROR.getCode(), ${entityName}ErrorEnum.UPDATE_ERROR.getMsg());
        }
    }

    @Override
    public JSONPageResult<${entityName}RespDTO> list${entityName}ByPage(${entityName}ListReqDTO ${firstLowerEntityName}ListReqDTO) {
        PageBean<${entityName}RespDTO> pageBean = PageUtil.validatePage(${firstLowerEntityName}ListReqDTO.getPage_num(),
                ${firstLowerEntityName}ListReqDTO.getPage_size(),${firstLowerEntityName}ListReqDTO.getOffset());
        pageBean.setList(${firstLowerEntityName}Mapper.list${entityName}ByPage(${firstLowerEntityName}ListReqDTO));
        pageBean.setTotal(${firstLowerEntityName}Mapper.list${entityName}Count(${firstLowerEntityName}ListReqDTO));
        return JSONPageResult.success(pageBean);
    }
}
